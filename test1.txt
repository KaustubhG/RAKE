In this work, we examine how transparent block-level compression in the I/O path can improve both the 
space efficiency and performance of online storage. We present ZBD, a block-layer driver that transparently
compresses and decompresses data as they flow between the file-system and storage devices. Our system
provides support for variable-size blocks, metadata caching, and persistence, as well as block allocation
and cleanup. ZBD targets maintaining high performance, by mitigating compression and decompression
overheads that can have a significant impact on performance by leveraging modern multicore CPUs through
explicit work scheduling. We present two case-studies for compression. First, we examine how our approach
can be used to increase the capacity of SSD-based caches, thus increasing their cost-effectiveness. Then, we
examine how ZBD can improve the efficiency of online disk-based storage systems.
We evaluate our approach in the Linux kernel on a commodity server with multicore CPUs, using Post-
Mark, SPECsfs2008, TPC-C, and TPC-H. Preliminary results show that transparent online block-level compression
is a viable option for improving effective storage capacity, it can improve I/O performance up to
80% by reducing I/O traffic and seek distance, and has a negative impact on performance, up to 34%, only
when single-thread I/O latency is critical. In particular, for SSD-based caching, our results indicate that,
in line with current technology trends, compressed caching trades off CPU utilization for performance and
enhances SSD efficiency as a storage cache up to 99%.